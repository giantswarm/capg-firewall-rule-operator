// Code generated by counterfeiter. DO NOT EDIT.
package controllersfakes

import (
	"context"
	"sync"

	"k8s.io/apimachinery/pkg/types"

	"github.com/giantswarm/capg-firewall-rule-operator/controllers"
)

type FakeClusterNATIPResolver struct {
	GetIPsStub        func(context.Context, types.NamespacedName) ([]string, error)
	getIPsMutex       sync.RWMutex
	getIPsArgsForCall []struct {
		arg1 context.Context
		arg2 types.NamespacedName
	}
	getIPsReturns struct {
		result1 []string
		result2 error
	}
	getIPsReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClusterNATIPResolver) GetIPs(arg1 context.Context, arg2 types.NamespacedName) ([]string, error) {
	fake.getIPsMutex.Lock()
	ret, specificReturn := fake.getIPsReturnsOnCall[len(fake.getIPsArgsForCall)]
	fake.getIPsArgsForCall = append(fake.getIPsArgsForCall, struct {
		arg1 context.Context
		arg2 types.NamespacedName
	}{arg1, arg2})
	stub := fake.GetIPsStub
	fakeReturns := fake.getIPsReturns
	fake.recordInvocation("GetIPs", []interface{}{arg1, arg2})
	fake.getIPsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClusterNATIPResolver) GetIPsCallCount() int {
	fake.getIPsMutex.RLock()
	defer fake.getIPsMutex.RUnlock()
	return len(fake.getIPsArgsForCall)
}

func (fake *FakeClusterNATIPResolver) GetIPsCalls(stub func(context.Context, types.NamespacedName) ([]string, error)) {
	fake.getIPsMutex.Lock()
	defer fake.getIPsMutex.Unlock()
	fake.GetIPsStub = stub
}

func (fake *FakeClusterNATIPResolver) GetIPsArgsForCall(i int) (context.Context, types.NamespacedName) {
	fake.getIPsMutex.RLock()
	defer fake.getIPsMutex.RUnlock()
	argsForCall := fake.getIPsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClusterNATIPResolver) GetIPsReturns(result1 []string, result2 error) {
	fake.getIPsMutex.Lock()
	defer fake.getIPsMutex.Unlock()
	fake.GetIPsStub = nil
	fake.getIPsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeClusterNATIPResolver) GetIPsReturnsOnCall(i int, result1 []string, result2 error) {
	fake.getIPsMutex.Lock()
	defer fake.getIPsMutex.Unlock()
	fake.GetIPsStub = nil
	if fake.getIPsReturnsOnCall == nil {
		fake.getIPsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.getIPsReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeClusterNATIPResolver) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getIPsMutex.RLock()
	defer fake.getIPsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClusterNATIPResolver) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ controllers.ClusterNATIPResolver = new(FakeClusterNATIPResolver)
