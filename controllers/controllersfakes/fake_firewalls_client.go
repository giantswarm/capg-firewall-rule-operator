// Code generated by counterfeiter. DO NOT EDIT.
package controllersfakes

import (
	"context"
	"sync"

	"github.com/giantswarm/capg-firewall-rule-operator/controllers"
	"sigs.k8s.io/cluster-api-provider-gcp/api/v1beta1"
)

type FakeFirewallsClient struct {
	CreateBastionFirewallRuleStub        func(context.Context, *v1beta1.GCPCluster) error
	createBastionFirewallRuleMutex       sync.RWMutex
	createBastionFirewallRuleArgsForCall []struct {
		arg1 context.Context
		arg2 *v1beta1.GCPCluster
	}
	createBastionFirewallRuleReturns struct {
		result1 error
	}
	createBastionFirewallRuleReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteBastionFirewallRuleStub        func(context.Context, *v1beta1.GCPCluster) error
	deleteBastionFirewallRuleMutex       sync.RWMutex
	deleteBastionFirewallRuleArgsForCall []struct {
		arg1 context.Context
		arg2 *v1beta1.GCPCluster
	}
	deleteBastionFirewallRuleReturns struct {
		result1 error
	}
	deleteBastionFirewallRuleReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFirewallsClient) CreateBastionFirewallRule(arg1 context.Context, arg2 *v1beta1.GCPCluster) error {
	fake.createBastionFirewallRuleMutex.Lock()
	ret, specificReturn := fake.createBastionFirewallRuleReturnsOnCall[len(fake.createBastionFirewallRuleArgsForCall)]
	fake.createBastionFirewallRuleArgsForCall = append(fake.createBastionFirewallRuleArgsForCall, struct {
		arg1 context.Context
		arg2 *v1beta1.GCPCluster
	}{arg1, arg2})
	stub := fake.CreateBastionFirewallRuleStub
	fakeReturns := fake.createBastionFirewallRuleReturns
	fake.recordInvocation("CreateBastionFirewallRule", []interface{}{arg1, arg2})
	fake.createBastionFirewallRuleMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFirewallsClient) CreateBastionFirewallRuleCallCount() int {
	fake.createBastionFirewallRuleMutex.RLock()
	defer fake.createBastionFirewallRuleMutex.RUnlock()
	return len(fake.createBastionFirewallRuleArgsForCall)
}

func (fake *FakeFirewallsClient) CreateBastionFirewallRuleCalls(stub func(context.Context, *v1beta1.GCPCluster) error) {
	fake.createBastionFirewallRuleMutex.Lock()
	defer fake.createBastionFirewallRuleMutex.Unlock()
	fake.CreateBastionFirewallRuleStub = stub
}

func (fake *FakeFirewallsClient) CreateBastionFirewallRuleArgsForCall(i int) (context.Context, *v1beta1.GCPCluster) {
	fake.createBastionFirewallRuleMutex.RLock()
	defer fake.createBastionFirewallRuleMutex.RUnlock()
	argsForCall := fake.createBastionFirewallRuleArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFirewallsClient) CreateBastionFirewallRuleReturns(result1 error) {
	fake.createBastionFirewallRuleMutex.Lock()
	defer fake.createBastionFirewallRuleMutex.Unlock()
	fake.CreateBastionFirewallRuleStub = nil
	fake.createBastionFirewallRuleReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFirewallsClient) CreateBastionFirewallRuleReturnsOnCall(i int, result1 error) {
	fake.createBastionFirewallRuleMutex.Lock()
	defer fake.createBastionFirewallRuleMutex.Unlock()
	fake.CreateBastionFirewallRuleStub = nil
	if fake.createBastionFirewallRuleReturnsOnCall == nil {
		fake.createBastionFirewallRuleReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createBastionFirewallRuleReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFirewallsClient) DeleteBastionFirewallRule(arg1 context.Context, arg2 *v1beta1.GCPCluster) error {
	fake.deleteBastionFirewallRuleMutex.Lock()
	ret, specificReturn := fake.deleteBastionFirewallRuleReturnsOnCall[len(fake.deleteBastionFirewallRuleArgsForCall)]
	fake.deleteBastionFirewallRuleArgsForCall = append(fake.deleteBastionFirewallRuleArgsForCall, struct {
		arg1 context.Context
		arg2 *v1beta1.GCPCluster
	}{arg1, arg2})
	stub := fake.DeleteBastionFirewallRuleStub
	fakeReturns := fake.deleteBastionFirewallRuleReturns
	fake.recordInvocation("DeleteBastionFirewallRule", []interface{}{arg1, arg2})
	fake.deleteBastionFirewallRuleMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFirewallsClient) DeleteBastionFirewallRuleCallCount() int {
	fake.deleteBastionFirewallRuleMutex.RLock()
	defer fake.deleteBastionFirewallRuleMutex.RUnlock()
	return len(fake.deleteBastionFirewallRuleArgsForCall)
}

func (fake *FakeFirewallsClient) DeleteBastionFirewallRuleCalls(stub func(context.Context, *v1beta1.GCPCluster) error) {
	fake.deleteBastionFirewallRuleMutex.Lock()
	defer fake.deleteBastionFirewallRuleMutex.Unlock()
	fake.DeleteBastionFirewallRuleStub = stub
}

func (fake *FakeFirewallsClient) DeleteBastionFirewallRuleArgsForCall(i int) (context.Context, *v1beta1.GCPCluster) {
	fake.deleteBastionFirewallRuleMutex.RLock()
	defer fake.deleteBastionFirewallRuleMutex.RUnlock()
	argsForCall := fake.deleteBastionFirewallRuleArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFirewallsClient) DeleteBastionFirewallRuleReturns(result1 error) {
	fake.deleteBastionFirewallRuleMutex.Lock()
	defer fake.deleteBastionFirewallRuleMutex.Unlock()
	fake.DeleteBastionFirewallRuleStub = nil
	fake.deleteBastionFirewallRuleReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFirewallsClient) DeleteBastionFirewallRuleReturnsOnCall(i int, result1 error) {
	fake.deleteBastionFirewallRuleMutex.Lock()
	defer fake.deleteBastionFirewallRuleMutex.Unlock()
	fake.DeleteBastionFirewallRuleStub = nil
	if fake.deleteBastionFirewallRuleReturnsOnCall == nil {
		fake.deleteBastionFirewallRuleReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteBastionFirewallRuleReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFirewallsClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createBastionFirewallRuleMutex.RLock()
	defer fake.createBastionFirewallRuleMutex.RUnlock()
	fake.deleteBastionFirewallRuleMutex.RLock()
	defer fake.deleteBastionFirewallRuleMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFirewallsClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ controllers.FirewallsClient = new(FakeFirewallsClient)
