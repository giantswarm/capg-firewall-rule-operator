// Code generated by counterfeiter. DO NOT EDIT.
package controllersfakes

import (
	"context"
	"sync"

	"github.com/giantswarm/capg-firewall-rule-operator/controllers"
	"github.com/giantswarm/capg-firewall-rule-operator/pkg/firewall"
	"sigs.k8s.io/cluster-api-provider-gcp/api/v1beta1"
)

type FakeFirewallsClient struct {
	ApplyRuleStub        func(context.Context, *v1beta1.GCPCluster, firewall.Rule) error
	applyRuleMutex       sync.RWMutex
	applyRuleArgsForCall []struct {
		arg1 context.Context
		arg2 *v1beta1.GCPCluster
		arg3 firewall.Rule
	}
	applyRuleReturns struct {
		result1 error
	}
	applyRuleReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteRuleStub        func(context.Context, *v1beta1.GCPCluster, string) error
	deleteRuleMutex       sync.RWMutex
	deleteRuleArgsForCall []struct {
		arg1 context.Context
		arg2 *v1beta1.GCPCluster
		arg3 string
	}
	deleteRuleReturns struct {
		result1 error
	}
	deleteRuleReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFirewallsClient) ApplyRule(arg1 context.Context, arg2 *v1beta1.GCPCluster, arg3 firewall.Rule) error {
	fake.applyRuleMutex.Lock()
	ret, specificReturn := fake.applyRuleReturnsOnCall[len(fake.applyRuleArgsForCall)]
	fake.applyRuleArgsForCall = append(fake.applyRuleArgsForCall, struct {
		arg1 context.Context
		arg2 *v1beta1.GCPCluster
		arg3 firewall.Rule
	}{arg1, arg2, arg3})
	stub := fake.ApplyRuleStub
	fakeReturns := fake.applyRuleReturns
	fake.recordInvocation("ApplyRule", []interface{}{arg1, arg2, arg3})
	fake.applyRuleMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFirewallsClient) ApplyRuleCallCount() int {
	fake.applyRuleMutex.RLock()
	defer fake.applyRuleMutex.RUnlock()
	return len(fake.applyRuleArgsForCall)
}

func (fake *FakeFirewallsClient) ApplyRuleCalls(stub func(context.Context, *v1beta1.GCPCluster, firewall.Rule) error) {
	fake.applyRuleMutex.Lock()
	defer fake.applyRuleMutex.Unlock()
	fake.ApplyRuleStub = stub
}

func (fake *FakeFirewallsClient) ApplyRuleArgsForCall(i int) (context.Context, *v1beta1.GCPCluster, firewall.Rule) {
	fake.applyRuleMutex.RLock()
	defer fake.applyRuleMutex.RUnlock()
	argsForCall := fake.applyRuleArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeFirewallsClient) ApplyRuleReturns(result1 error) {
	fake.applyRuleMutex.Lock()
	defer fake.applyRuleMutex.Unlock()
	fake.ApplyRuleStub = nil
	fake.applyRuleReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFirewallsClient) ApplyRuleReturnsOnCall(i int, result1 error) {
	fake.applyRuleMutex.Lock()
	defer fake.applyRuleMutex.Unlock()
	fake.ApplyRuleStub = nil
	if fake.applyRuleReturnsOnCall == nil {
		fake.applyRuleReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.applyRuleReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFirewallsClient) DeleteRule(arg1 context.Context, arg2 *v1beta1.GCPCluster, arg3 string) error {
	fake.deleteRuleMutex.Lock()
	ret, specificReturn := fake.deleteRuleReturnsOnCall[len(fake.deleteRuleArgsForCall)]
	fake.deleteRuleArgsForCall = append(fake.deleteRuleArgsForCall, struct {
		arg1 context.Context
		arg2 *v1beta1.GCPCluster
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.DeleteRuleStub
	fakeReturns := fake.deleteRuleReturns
	fake.recordInvocation("DeleteRule", []interface{}{arg1, arg2, arg3})
	fake.deleteRuleMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFirewallsClient) DeleteRuleCallCount() int {
	fake.deleteRuleMutex.RLock()
	defer fake.deleteRuleMutex.RUnlock()
	return len(fake.deleteRuleArgsForCall)
}

func (fake *FakeFirewallsClient) DeleteRuleCalls(stub func(context.Context, *v1beta1.GCPCluster, string) error) {
	fake.deleteRuleMutex.Lock()
	defer fake.deleteRuleMutex.Unlock()
	fake.DeleteRuleStub = stub
}

func (fake *FakeFirewallsClient) DeleteRuleArgsForCall(i int) (context.Context, *v1beta1.GCPCluster, string) {
	fake.deleteRuleMutex.RLock()
	defer fake.deleteRuleMutex.RUnlock()
	argsForCall := fake.deleteRuleArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeFirewallsClient) DeleteRuleReturns(result1 error) {
	fake.deleteRuleMutex.Lock()
	defer fake.deleteRuleMutex.Unlock()
	fake.DeleteRuleStub = nil
	fake.deleteRuleReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFirewallsClient) DeleteRuleReturnsOnCall(i int, result1 error) {
	fake.deleteRuleMutex.Lock()
	defer fake.deleteRuleMutex.Unlock()
	fake.DeleteRuleStub = nil
	if fake.deleteRuleReturnsOnCall == nil {
		fake.deleteRuleReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteRuleReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFirewallsClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.applyRuleMutex.RLock()
	defer fake.applyRuleMutex.RUnlock()
	fake.deleteRuleMutex.RLock()
	defer fake.deleteRuleMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFirewallsClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ controllers.FirewallsClient = new(FakeFirewallsClient)
