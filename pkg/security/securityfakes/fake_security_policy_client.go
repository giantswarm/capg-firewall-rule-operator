// Code generated by counterfeiter. DO NOT EDIT.
package securityfakes

import (
	"context"
	"sync"

	"sigs.k8s.io/cluster-api-provider-gcp/api/v1beta1"

	"github.com/giantswarm/capg-firewall-rule-operator/pkg/security"
)

type FakeSecurityPolicyClient struct {
	ApplyPolicyStub        func(context.Context, *v1beta1.GCPCluster, security.Policy) error
	applyPolicyMutex       sync.RWMutex
	applyPolicyArgsForCall []struct {
		arg1 context.Context
		arg2 *v1beta1.GCPCluster
		arg3 security.Policy
	}
	applyPolicyReturns struct {
		result1 error
	}
	applyPolicyReturnsOnCall map[int]struct {
		result1 error
	}
	DeletePolicyStub        func(context.Context, *v1beta1.GCPCluster, string) error
	deletePolicyMutex       sync.RWMutex
	deletePolicyArgsForCall []struct {
		arg1 context.Context
		arg2 *v1beta1.GCPCluster
		arg3 string
	}
	deletePolicyReturns struct {
		result1 error
	}
	deletePolicyReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSecurityPolicyClient) ApplyPolicy(arg1 context.Context, arg2 *v1beta1.GCPCluster, arg3 security.Policy) error {
	fake.applyPolicyMutex.Lock()
	ret, specificReturn := fake.applyPolicyReturnsOnCall[len(fake.applyPolicyArgsForCall)]
	fake.applyPolicyArgsForCall = append(fake.applyPolicyArgsForCall, struct {
		arg1 context.Context
		arg2 *v1beta1.GCPCluster
		arg3 security.Policy
	}{arg1, arg2, arg3})
	stub := fake.ApplyPolicyStub
	fakeReturns := fake.applyPolicyReturns
	fake.recordInvocation("ApplyPolicy", []interface{}{arg1, arg2, arg3})
	fake.applyPolicyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSecurityPolicyClient) ApplyPolicyCallCount() int {
	fake.applyPolicyMutex.RLock()
	defer fake.applyPolicyMutex.RUnlock()
	return len(fake.applyPolicyArgsForCall)
}

func (fake *FakeSecurityPolicyClient) ApplyPolicyCalls(stub func(context.Context, *v1beta1.GCPCluster, security.Policy) error) {
	fake.applyPolicyMutex.Lock()
	defer fake.applyPolicyMutex.Unlock()
	fake.ApplyPolicyStub = stub
}

func (fake *FakeSecurityPolicyClient) ApplyPolicyArgsForCall(i int) (context.Context, *v1beta1.GCPCluster, security.Policy) {
	fake.applyPolicyMutex.RLock()
	defer fake.applyPolicyMutex.RUnlock()
	argsForCall := fake.applyPolicyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSecurityPolicyClient) ApplyPolicyReturns(result1 error) {
	fake.applyPolicyMutex.Lock()
	defer fake.applyPolicyMutex.Unlock()
	fake.ApplyPolicyStub = nil
	fake.applyPolicyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSecurityPolicyClient) ApplyPolicyReturnsOnCall(i int, result1 error) {
	fake.applyPolicyMutex.Lock()
	defer fake.applyPolicyMutex.Unlock()
	fake.ApplyPolicyStub = nil
	if fake.applyPolicyReturnsOnCall == nil {
		fake.applyPolicyReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.applyPolicyReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSecurityPolicyClient) DeletePolicy(arg1 context.Context, arg2 *v1beta1.GCPCluster, arg3 string) error {
	fake.deletePolicyMutex.Lock()
	ret, specificReturn := fake.deletePolicyReturnsOnCall[len(fake.deletePolicyArgsForCall)]
	fake.deletePolicyArgsForCall = append(fake.deletePolicyArgsForCall, struct {
		arg1 context.Context
		arg2 *v1beta1.GCPCluster
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.DeletePolicyStub
	fakeReturns := fake.deletePolicyReturns
	fake.recordInvocation("DeletePolicy", []interface{}{arg1, arg2, arg3})
	fake.deletePolicyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSecurityPolicyClient) DeletePolicyCallCount() int {
	fake.deletePolicyMutex.RLock()
	defer fake.deletePolicyMutex.RUnlock()
	return len(fake.deletePolicyArgsForCall)
}

func (fake *FakeSecurityPolicyClient) DeletePolicyCalls(stub func(context.Context, *v1beta1.GCPCluster, string) error) {
	fake.deletePolicyMutex.Lock()
	defer fake.deletePolicyMutex.Unlock()
	fake.DeletePolicyStub = stub
}

func (fake *FakeSecurityPolicyClient) DeletePolicyArgsForCall(i int) (context.Context, *v1beta1.GCPCluster, string) {
	fake.deletePolicyMutex.RLock()
	defer fake.deletePolicyMutex.RUnlock()
	argsForCall := fake.deletePolicyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSecurityPolicyClient) DeletePolicyReturns(result1 error) {
	fake.deletePolicyMutex.Lock()
	defer fake.deletePolicyMutex.Unlock()
	fake.DeletePolicyStub = nil
	fake.deletePolicyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSecurityPolicyClient) DeletePolicyReturnsOnCall(i int, result1 error) {
	fake.deletePolicyMutex.Lock()
	defer fake.deletePolicyMutex.Unlock()
	fake.DeletePolicyStub = nil
	if fake.deletePolicyReturnsOnCall == nil {
		fake.deletePolicyReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deletePolicyReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSecurityPolicyClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.applyPolicyMutex.RLock()
	defer fake.applyPolicyMutex.RUnlock()
	fake.deletePolicyMutex.RLock()
	defer fake.deletePolicyMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSecurityPolicyClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ security.SecurityPolicyClient = new(FakeSecurityPolicyClient)
